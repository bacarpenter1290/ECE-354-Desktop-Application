package database;

import java.sql.*;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import entities.*;

public class Database {
	
	private final String dBSchema = "coconinodatabase";
	private final String dBUser = "OnlineShoppingApp";
	private final String dBPass = "eSGDm43ZU6bGz9w";
	
	private Connection conn;
	
	public Database() throws CustomException {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(
					"jdbc:mysql://localhost:3306/" + dBSchema, dBUser, dBPass);
		}
		catch(Exception e){ 
			System.out.println("Error when connecting to databse: " + e);
			throw new CustomException("DATABASE_EXCEPTION", "Failed to connect to database", e);
		}  
	}
	
	public void close() {
		try {
			conn.close();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	// checks if a given password is correct
	public boolean isPasswordCorrect(int customerNumber, String pass) {
		boolean isPasswordCorrect = false;
		String passHash = "";
		
		// get the stored hash from the database
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from passwords where customerNumber = " + customerNumber);
			while(rs.next()) {
				passHash = rs.getString(2);
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		
		// if the stored hash equals to hash of the given password, it's the right password
		if (passHash.equals(Sha1.hash(pass))) {
			isPasswordCorrect = true;
		}
		return isPasswordCorrect;
	}
	
	// find a bank account with a given bank account number
	public BankAccount getBankAccount(int bankAccountNumber) {
		int customerNumber = 0;
		String bank = "";
		int routingNumber = 0;
		int accountNumber = 0;
		double balance = 0;
		
		BankAccount aBankAccount;	
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from bankaccounts where bankAccountNumber = " + bankAccountNumber);
			while(rs.next()) {
				bankAccountNumber = rs.getInt(1);
				customerNumber = rs.getInt(2);
				bank = rs.getString(3);
				routingNumber = rs.getInt(4);
				accountNumber = rs.getInt(5);
				balance = rs.getDouble(6);
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		aBankAccount = new BankAccount(bankAccountNumber, customerNumber, bank, routingNumber, accountNumber, balance);
		
		return aBankAccount;
	}
	
	// find a bank account with a given customer number
	public BankAccount getCustomersBankAccount(int customerNumber) {
		int bankAccountNumber = 0;
		String bank = "";
		int routingNumber = 0;
		int accountNumber = 0;
		double balance = 0;
		
		BankAccount aBankAccount;	
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from bankaccounts where customerNumber = " + customerNumber);
			while(rs.next()) {
				bankAccountNumber = rs.getInt(1);
				customerNumber = rs.getInt(2);
				bank = rs.getString(3);
				routingNumber = rs.getInt(4);
				accountNumber = rs.getInt(5);
				balance = rs.getDouble(6);
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		aBankAccount = new BankAccount(bankAccountNumber, customerNumber, bank, routingNumber, accountNumber, balance);
		
		return aBankAccount;
	}
	
	// find a brand with a given vendor number
	public Brand getBrand(int vendorNumber) {
		String brandName = "";
		String description = "";
		
		Brand aBrand;	
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from brands where vendorNumber = " + vendorNumber);
			while(rs.next()) {
				vendorNumber = rs.getInt(1);
				brandName = rs.getString(2);
				description = rs.getString(3);
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		aBrand = new Brand(vendorNumber, brandName, description);
		
		return aBrand;
	}
	
	// find all brands in database
	public List<Brand> getAllBrands() {		
		List<Brand> brands = new ArrayList<Brand>();	
		
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from brands");
			while(rs.next()) {
				int vendorNumber = 0;
				String brandName = "";
				String description = "";
				
				vendorNumber = rs.getInt(1);
				brandName = rs.getString(2);
				description = rs.getString(3);
				brands.add(new Brand(vendorNumber, brandName, description));
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		
		return brands;
	}
	
	// find a customer with a given customerNumber
	public Customer getCustomer(int customerNumber) {
		String firstName = "";
		String lastName = "";
		String phoneNumber = "";
		String addressLine1 = "";
		String addressLine2 = "";
		String city = "";
		String state = "";
		String postalCode = "";
		String country = "";
		
		Customer aCustomer;	
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from customers where customerNumber = " + customerNumber);
			while(rs.next()) {
				customerNumber = rs.getInt(1);
				firstName = rs.getString(2);
				lastName = rs.getString(3);
				phoneNumber = rs.getString(4);
				addressLine1 = rs.getString(5);
				addressLine2 = rs.getString(6);
				city = rs.getString(7);
				state = rs.getString(8);
				postalCode = rs.getString(9);
				country = rs.getString(10);
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		aCustomer = new Customer(customerNumber, firstName, lastName, phoneNumber, addressLine1, addressLine2, city, state, postalCode, country);
		
		return aCustomer;
	}
	
	// find all customers
	public List<Customer> getAllCustomers() {
		
		List<Customer> customers = new ArrayList<Customer>();	
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from customers");
			while(rs.next()) {
				int customerNumber = 0;
				String firstName = "";
				String lastName = "";
				String phoneNumber = "";
				String addressLine1 = "";
				String addressLine2 = "";
				String city = "";
				String state = "";
				String postalCode = "";
				String country = "";
				
				customerNumber = rs.getInt(1);
				firstName = rs.getString(2);
				lastName = rs.getString(3);
				phoneNumber = rs.getString(4);
				addressLine1 = rs.getString(5);
				addressLine2 = rs.getString(6);
				city = rs.getString(7);
				state = rs.getString(8);
				postalCode = rs.getString(9);
				country = rs.getString(10);
				
				customers.add(new Customer(customerNumber, firstName, lastName, phoneNumber, addressLine1, addressLine2, city, state, postalCode, country));
			}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		return customers;
	}
	
	public Order getOrder(int orderNumber) {
		int customerNumber = 0;
		Date orderDate = new Date(0);
		Date requiredDate = new Date(0);
		Date shippedDate = new Date(0);
		String status = "";
		String comments = "";
		int productNumber = 0;
		int orderLineNumber = 0;
		int quantityOrdered = 0;
		double priceEach = 0;
		String productName = "";
		int vendorNumber = 0;
		int productLineNumber = 0;
		String productDescription = "";
		int quantityInStock = 0;
		double mrsp = 0;
		double percentDiscount = 0;
		
		Order order;
		List<OrderDetail> orderDetails = new ArrayList<OrderDetail>();
		Product product;
		try {
			Statement stmt = conn.createStatement();
			ResultSet rs = stmt.executeQuery("select * from orders where orderNumber = " + orderNumber);
			while(rs.next()) {	
				orderNumber = rs.getInt(1);
				customerNumber = rs.getInt(2);
				orderDate = rs.getDate(3);
				requiredDate = LocalDate.MIN;
				shippedDate = LocalDate.MIN;
				status = "";
				comments = "";
				productNumber = 0;
				orderLineNumber = 0;
				quantityOrdered = 0;
				priceEach = 0;
				productName = "";
				vendorNumber = 0;
				productLineNumber = 0;
				productDescription = "";
				quantityInStock = 0;
				mrsp = 0;
				percentDiscount = 0;
				}
		}
		catch(Exception e){ 
			System.out.println(e);
		}
		order = new order()
		return order;
	}
}
